import sqlite3
from telebot import types
import telebot
import random
import time
import requests

response = requests.get('https://api.telegram.org/bot<YOUR_TOKEN>/getMe', timeout=600)


# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()

last_spin_time = {}


# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        chat_id INTEGER,
        real_balance REAL,
        demo_balance REAL
    )
''')
conn.commit()

# –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def insert_user(username, chat_id):
    cursor.execute('''
        INSERT INTO users (username, chat_id, real_balance, demo_balance)
        VALUES (?, ?, 0.0, 0.0)
    ''', (username, chat_id))
    conn.commit()

# –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_balance(chat_id, real_balance=None, demo_balance=None):
    if real_balance is not None:
        cursor.execute('''
            UPDATE users
            SET real_balance = ?
            WHERE chat_id = ?
        ''', (real_balance, chat_id))
    if demo_balance is not None:
        cursor.execute('''
            UPDATE users
            SET demo_balance = ?
            WHERE chat_id = ?
        ''', (demo_balance, chat_id))
    conn.commit()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot_token = '6589007050:AAG-cj1bTYlJ4cdgYu4Z8sa1uK2cjM3UWOY'
bot = telebot.TeleBot(bot_token)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def user_exists(chat_id):
    cursor.execute('SELECT id FROM users WHERE chat_id = ?', (chat_id,))
    data = cursor.fetchone()
    return data is not None


def get_real_balance(chat_id):
    cursor.execute('SELECT real_balance FROM users WHERE chat_id = ?', (chat_id,))
    data = cursor.fetchone()
    return data[0] if data else 0


@bot.message_handler(commands=['start'])
def handle_start(message):
    if user_exists(message.chat.id):
        bot.reply_to(message, f'‚úÖ–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {message.from_user.username}‚úÖ')
    else:
        insert_user(message.from_user.username, message.chat.id)
        bot.reply_to(message, '‚úÖ–ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ‚úÖ')

    real_balance = get_real_balance(message.chat.id)
    bot.send_message(message.chat.id, f'–í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ‚öúÔ∏è{real_balance}‚öúÔ∏è', reply_markup=generate_markup())



@bot.message_handler(func=lambda message: message.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Åüì≤')
def handle_replenish_balance(message):
    markup = generate_payment_method_markup()
    bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)



def generate_payment_method_markup():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button1 = types.KeyboardButton('üí≥–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—Éüí≥')
    button2 = types.KeyboardButton('üì©–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫üì©')
    button3 = types.KeyboardButton('üì±–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–ºüì±')
    button4 = types.KeyboardButton("–ù–∞–∑–∞–¥‚Ü©Ô∏è")
    markup.add(button1, button2, button3, button4)
    return markup

@bot.message_handler(func=lambda message: message.text == 'üì©–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫üì©')
def handle_crypto_payment(message):
    user_id = message.chat.id
    bot.send_message(
        user_id,
        f'–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ - 100 UAHüíµ\n'
        f'–î–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã LTC, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å: <code>ltc1q3894lgd3em7eyyaaanglkf3vk7haj3ne942m8m</code> üöÄ\n'
        f'–î–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã SOL, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å: <code>F8zjvekk4AFghZrJqFNQ3gRYgikYBH6HHD7w8Qw4kB5x</code> üåû\n'
        f'–î–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã MATIC, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å: <code>0x59fde972706997b8b4e1036411F150Fe70383550</code> üö¥‚Äç‚ôÄÔ∏è\n'
        f'–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –ø–ª–∞—Ç–µ–∂–∞ –≤–º–µ—Å—Ç–µ ID —Å—é–¥–∞ -> <a href="https://t.me/casinosupportt">casinosupportt</a>\n'
        f'–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID - {user_id} üÜî',
        parse_mode='HTML',
    )


@bot.message_handler(func=lambda message: message.text == 'üí≥–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—Éüí≥')
def handle_card_payment(message):
    user_id = message.chat.id
    bot.send_message(
        user_id,
        f'–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ - 150 UAHüíµ\n'
        f'<code>5355 5722 5193 8757</code>\n'
        f'–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –ø–ª–∞—Ç–µ–∂–∞ –≤–º–µ—Å—Ç–µ —Å –≤–∞—à–∏–º ID —Å—é–¥–∞ -> <a href="https://t.me/casinosupportt">casinosupportt</a>\n'
        f'–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID - {user_id} üÜî',
        parse_mode='HTML',
    )


@bot.message_handler(func=lambda message: message.text == 'üì±–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–ºüì±')
def handle_tp_payment(message):
    user_id = message.chat.id
    bot.send_message(user_id, '–î–∞–Ω–Ω—ã–π —Ç–∏–ø –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π')



@bot.message_handler(func=lambda message: message.text == '–í—ã–≤–æ–¥ –°—Ä–µ–¥—Å—Ç–≤üí∏')
def handlein_replenish_balance(message):
    chat_id = message.chat.id
    real_balance = get_real_balance(chat_id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if real_balance >= 300:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 300 UAH
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button1 = types.KeyboardButton('üí≥–ù–∞ –ö–∞—Ä—Ç—Éüí≥')
        button2 = types.KeyboardButton('üì©–í—ã–≤–æ–¥ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫üì©')
        button3 = types.KeyboardButton('–ù–∞–∑–∞–¥‚Ü©Ô∏è')
        markup.add(button1, button2, button3)

        bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞üíµ:",
            reply_markup=markup
        )
    else:
        bot.send_message(
            chat_id=chat_id,
            text="‚ÄºÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 300 UAH ‚ÄºÔ∏è"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí≥–ù–∞ –ö–∞—Ä—Ç—Éüí≥"
@bot.message_handler(func=lambda message: message.text == 'üí≥–ù–∞ –ö–∞—Ä—Ç—Éüí≥')
def handle_card_withdrawal(message):
    chat_id = message.chat.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    bot.send_message(
        chat_id=chat_id,
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ —Å—É–º—É –≤—ã–≤–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
             "{–ù–æ–º–µ—Ä} / {–°—É–º–∞} \n"
             "–ü—Ä–∏–º–µ—Ä* 5355 5722 5193 8752 / 550UAH "
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –∏ –∏–º–µ–Ω–∏
    bot.register_next_step_handler(message, process_card_withdrawal)



@bot.message_handler(func=lambda message: message.text == 'üì©–í—ã–≤–æ–¥ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫üì©')
def handle_crypto_withdrawal(message):
    chat_id = message.chat.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    bot.send_message(
        chat_id=chat_id,
        text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –∏ —Å—É–º—É –≤—ã–≤–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
             "{–ê–¥—Ä–µ—Å} / {–°—É–º–∞} \n"
             "–ü—Ä–∏–º–µ—Ä* ltc1q3894lgd3em7eyyaaanglkf3vk7haj3ne942m8m / 350UAH "
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –∏ –∏–º–µ–Ω–∏
    bot.register_next_step_handler(message, process_card_withdrawal)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –∏ –∏–º–µ–Ω–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
def process_card_withdrawal(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π "–ù–∞–∑–∞–¥‚Ü©Ô∏è
    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        bot.send_message(
            chat_id=chat_id,
            text=f"–ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥‚Ü©Ô∏è'")
        return

    withdrawal_info = message.text.strip()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_notification = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º {message.from_user.username} –∏ ID {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥  - {withdrawal_info}"
    bot.send_message(-4080329633, admin_notification)

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç. –¥.

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(
        chat_id=chat_id,
        text=f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç:\n{withdrawal_info}\n\n"
             "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω‚úÖ\n"
             " –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–π–º–µ—Ç ~20 –º–∏–Ω—É—Ç‚è±Ô∏è. –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à—É —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—Éüßë‚Äçüíª-> <a href='https://t.me/casinosupportt'>casinosupportt</a>",parse_mode='HTML'
    )


#------------------------------------------------------------------------------------------------------------------------------------------------------------------#




#------------------------------------------------------------------------------------------------------------------------------------------------------------------#
#–õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã "ü•ù", "üçá", "üå∂", "üçÖ", "üçì", "ü•ï"   üßõüèªüßùüèª‚Äç‚ôÄÔ∏èüßüüßôüèªüßöüèª‚Äç‚ôÄÔ∏èüßûü•∑üèª
user_game = {}

user_bets = {}
fruits_and_veggies = ["ü•ù", "üçá", "üå∂", "üçÖ", "üçì", "ü•ï"]


@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –ò–≥—Ä–∞—Ç—åüé∞')
def handle_start_playing(message):
    markup = generate_play_mode_markup()
    bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'ü™ô–ò–≥—Ä–∞—Ç—å —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Å—á–µ—Ç–æ–ºü™ô')
def handle_demo_play(message):
    markup = generate_demo_game_markup()
    bot.send_message(chat_id=message.chat.id, text="‚ÄºÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É‚ÄºÔ∏è", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è')
def handle_go_back(message):
    bot.send_message(chat_id=message.chat.id, text="üìç–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æüìç", reply_markup=generate_markup())

@bot.message_handler(func=lambda message: message.text == '‚öúÔ∏è–ò–≥—Ä–∞—Ç—å –ù–∞ —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å‚öúÔ∏è')
def handle_real_play(message):
    real_balance = get_real_balance(message.chat.id)
    if real_balance == 0:
        bot.send_message(chat_id=message.chat.id, text="‚ÄºÔ∏è–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0, –¥–ª—è –∏–≥—Ä—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å‚ÄºÔ∏è")
    else:
        bot.send_message(chat_id=message.chat.id, text="‚ÄºÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É‚ÄºÔ∏è", reply_markup=generate_game_markup())

@bot.message_handler(func=lambda message: message.text == '–°–ª–æ—Ç—ãüé∞')
def handle_slots(message):
    user_game[message.chat.id] = 'slots'
    bot.send_message(chat_id=message.chat.id, text="üí∞–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –≤ —á–∞—Ç: (3 - 50 UAH)üí∞", reply_markup=generate_back_markup())


@bot.message_handler(func=lambda message: message.text.isdigit())
def handle_bet_size(message):
    bet_size = int(message.text)
    user_id = message.chat.id
    real_balance = get_real_balance(user_id)

    if user_game.get(message.chat.id) == 'slots' and 3 <= bet_size <= 50:
        user_bets[message.chat.id] = bet_size
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
        with open('aaa.jpg', 'rb') as photo:
            bot.send_photo(chat_id=message.chat.id, photo=photo, caption=f"–í—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ —Å–æ —Å—Ç–∞–≤–∫–æ–π üí∞{bet_size}üí∞\n"
                                                                         f"üé∞ –ü—Ä–∞–≤–∏–ª–∞ –°–ª–æ—Ç–æ–≤: –í—ã–∏–≥—Ä—ã—à –ø—Ä–∏ 3, 4, 5 –∏–ª–∏ 6 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö –≤ —Ä—è–¥ –∏–ª–∏ 3 —Å–∏–º–≤–æ–ª–∞ –Ω–∞–∏—Å–∫–æ—Å–æ–∫. –£–¥–∞—á–∏ –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö! üí∞",
                           reply_markup=generate_slot_markup())

    elif user_game.get(user_id) == 'baccarat' and 3 <= bet_size <= 25:

        if bet_size > real_balance:
            bot.send_message(user_id, "‚ùå–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–Ω–∏–∑—å—Ç–µ –µ–µ.‚ùå")

            return

        user_bets[user_id] = bet_size
        with open('bacara.jpg', 'rb') as photo:
            bot.send_photo(chat_id=message.chat.id, photo=photo, caption=f"–í—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ —Å–æ —Å—Ç–∞–≤–∫–æ–π üí∞{bet_size}üí∞\n"
                                      f"üÉè –ü—Ä–∞–≤–∏–ª–∞ –ë–∞–∫–∫–∞—Ä–∞: –í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç - —Å–∏–Ω–∏–π –∏–ª–∏ –∫—Ä–∞—Å–Ω—ã–π (45% —à–∞–Ω—Å), –∏–ª–∏ —Å–µ—Ä—ã–π (10% —à–∞–Ω—Å). –í—ã–ø–ª–∞—Ç—ã –ó–∞ —Å–∏–Ω–∏–π –∏ –∫—Ä–∞—Å–Ω—ã–π - x2, –∑–∞ —Å–µ—Ä—ã–π - x10. –£–¥–∞—á–∏!",
                             reply_markup=generate_baccarat_markup())

@bot.message_handler(func=lambda message: message.text == 'Spinüìç')
def handle_spin(message):
    bet_size = user_bets.get(message.chat.id, 0)
    real_balance = get_real_balance(message.chat.id)



    if real_balance == 0:
        bot.send_message(chat_id=message.chat.id, text="‚ùå–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0, –¥–ª—è –∏–≥—Ä—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å‚ùå")
        bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=generate_markup())
        return

    if bet_size > real_balance:
        bot.send_message(chat_id=message.chat.id, text="‚ùå–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–Ω–∏–∑—å—Ç–µ –µ–µ‚ùå")
        handle_slots(message)
        return

    new_balance = real_balance - bet_size
    update_balance(message.chat.id, real_balance=new_balance)
    # bot.send_message(message.chat.id, f'–í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ‚öúÔ∏è{new_balance}‚öúÔ∏è')

    spin_result = generate_spin()
    bot.send_message(chat_id=message.chat.id, text=spin_result)  # –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞

    total_winning_amount = 0

    for line in spin_result.split("\n"):
        if has_six_consecutive(line):
            total_winning_amount += bet_size * 5
        elif has_five_consecutive(line):
            total_winning_amount += bet_size * 4
        elif has_four_consecutive(line):
            total_winning_amount += bet_size * 3
        elif has_three_consecutive(line):
            total_winning_amount += bet_size * 2

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è 3 —Å–∏–º–≤–æ–ª–æ–≤
    spin_matrix = [list(line) for line in spin_result.split("\n")]
    if has_diagonal_consecutive(spin_matrix):
        total_winning_amount += bet_size * 2

    if total_winning_amount:
        new_balance += total_winning_amount
        update_balance(message.chat.id, real_balance=new_balance)
        bot.send_message(chat_id=message.chat.id, text=f"üíé–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {total_winning_amount}üíé\n"
                                                       f"–ë–∞–ª–∞–Ω—Å ‚öúÔ∏è{new_balance}‚öúÔ∏è UAH")
    else:
        new_balance += total_winning_amount
        update_balance(message.chat.id, real_balance=new_balance)
        bot.send_message(chat_id=message.chat.id, text=f"‚ùå–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏‚ùå\n"
                                                       f"–ë–∞–ª–∞–Ω—Å ‚öúÔ∏è{new_balance}‚öúÔ∏è UAH")


def has_three_consecutive(line):
    for i in range(0, len(line) - 2):
        if line[i] == line[i+1] == line[i+2]:
            return True
    return False

def has_four_consecutive(line):
    for i in range(0, len(line) - 3):
        if line[i] == line[i+1] == line[i+2] == line[i+3]:
            return True
    return False

def has_five_consecutive(line):
    for i in range(0, len(line) - 4):
        if line[i] == line[i+1] == line[i+2] == line[i+3] == line[i+4]:
            return True
    return False

def has_six_consecutive(line):
    for i in range(0, len(line) - 5):
        if line[i] == line[i+1] == line[i+2] == line[i+3] == line[i+4] == line[i+5]:
            return True
    return False




@bot.message_handler(func=lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É‚öôÔ∏è')
def handle_change_bet(message):
    bot.send_message(chat_id=message.chat.id, text="üí∞–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –≤ —á–∞—Ç: (3 - 50 UAH)üí∞")



def generate_spin():
    line1 = "‚ûñ‚û°Ô∏è" + ''.join(random.choices(fruits_and_veggies, k=6)) + "‚¨ÖÔ∏è‚ûñ"
    line2 = "‚ûñ‚û°Ô∏è" + ''.join(random.choices(fruits_and_veggies, k=6)) + "‚¨ÖÔ∏è‚ûñ"
    line3 = "‚ûñ‚û°Ô∏è" + ''.join(random.choices(fruits_and_veggies, k=6)) + "‚¨ÖÔ∏è‚ûñ"
    return line1 + "\n" + line2 + "\n" + line3


def consecutive_symbols(line):
    max_count = 0
    current_count = 1

    for i in range(1, len(line)):
        if line[i] == line[i - 1]:
            current_count += 1
        else:
            if current_count > max_count:
                max_count = current_count
            current_count = 1

    if current_count > max_count:
        max_count = current_count

    return max_count


def has_diagonal_consecutive(matrix):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏."""
    for i in range(len(matrix) - 2):
        for j in range(len(matrix[i]) - 2):
            if matrix[i][j] == matrix[i+1][j+1] == matrix[i+2][j+2]:
                return True
            if matrix[i][j+2] == matrix[i+1][j+1] == matrix[i+2][j]:
                return True
    return False

@bot.message_handler(func=lambda message: message.text == '–î–µ–º–æ –°–ª–æ—Ç—ãüé∞')
def handle_demo_slots(message):
    markup = generate_demo_slots_markup()
    bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üìçSpin')
def handle_spin_demo(message):
    bet_size = user_bets.get(message.chat.id, 0)
    spin_result = generate_spin()

    bot.send_message(chat_id=message.chat.id, text=spin_result)  # –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞

    total_win_multiplier = 0
    spin_matrix = [list(line) for line in spin_result.split("\n")]

    for line in spin_result.split("\n"):
        if has_six_consecutive(line):
            total_win_multiplier += 5
        elif has_five_consecutive(line):
            total_win_multiplier += 4
        elif has_four_consecutive(line):
            total_win_multiplier += 3
        elif has_three_consecutive(line):
            total_win_multiplier += 2

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è 3 —Å–∏–º–≤–æ–ª–æ–≤
    if has_diagonal_consecutive(spin_matrix):
        total_win_multiplier += 2

    if total_win_multiplier:
        bot.send_message(chat_id=message.chat.id, text=f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –±—ã x{total_win_multiplier}ü™ô –æ—Ç —Å—Ç–∞–≤–∫–∏")


@bot.message_handler(func=lambda message: message.text == '–ë–∞–∫–∞—Ä–∞üé≤')
def handle_baccarat(message):
    user_game[message.chat.id] = 'baccarat'
    real_balance = get_real_balance(message.chat.id)
    if real_balance == 0:
        bot.send_message(message.chat.id, "‚ùå–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0, –¥–ª—è –∏–≥—Ä—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å‚ùå")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=generate_markup())
    else:
        bot.send_message(message.chat.id, "üí∞–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –≤ —á–∞—Ç: (3 - 25 UAH)üí∞")




def generate_baccarat_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ù–∞—á–∞—Ç—å –ò–≥—Ä–∞—Ç—å –≤ –ë–∞–∫–∞—Ä—Éüé∞")
    item2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É‚öôÔ∏è")
    item3 = types.KeyboardButton("–ù–∞–∑–∞–¥‚Ü©Ô∏è")

    markup.row(item1)
    markup.row(item2, item3)
    return markup  # –í–∞–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–∞–∑–º–µ—Ç–∫–∏

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –ò–≥—Ä–∞—Ç—å –≤ –ë–∞–∫–∞—Ä—Éüé∞')
def handle_start_baccarat_game(message):
    markup = generate_baccarat_color_markup()
    bot.send_message(message.chat.id, "üé≤–í—ã–±–µ—Ä–µ—Ç–µ —Ü–≤–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—åüé≤", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ['üü¶', 'üü•', '‚¨úÔ∏è'])
def handle_baccarat_color_choice(message):
    color_choice = message.text
    user_id = message.chat.id
    real_balance = get_real_balance(user_id)

    if real_balance == 0:
        bot.send_message(user_id, "‚ùå–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0, –¥–ª—è –∏–≥—Ä—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å‚ùå")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=generate_markup())
        return

    if color_choice == 'üü¶' or color_choice == 'üü•':
        win_chance = 45
    elif color_choice == '‚¨úÔ∏è':
        win_chance = 3
        payout_multiplier = 10  # set the multiplier to 10 for the gray color
    else:
        win_chance = 0

    if random.randint(1, 100) <= win_chance:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∏–≥—Ä–∞–ª, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –≤
        bet_size = user_bets.get(user_id, 0)
        if color_choice == '‚¨úÔ∏è':
            new_balance = real_balance + (bet_size * payout_multiplier)
        else:
            new_balance = real_balance + (bet_size * 2)
        update_balance(user_id, real_balance=new_balance)
        bot.send_message(user_id, "üíé–ü–æ–±–µ–¥–∞! –í–∞—à –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ωüíé")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∏–≥—Ä–∞–ª, —É–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
        bet_size = user_bets.get(user_id, 0)
        new_balance = real_balance - bet_size
        update_balance(user_id, real_balance=new_balance)
        bot.send_message(user_id, "üõë–ü—Ä–æ–∏–≥—Ä—ã—à. –í–∞—à –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ωüõë")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º –±–∞–ª–∞–Ω—Å–µ
    bot.send_message(user_id, f'–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ‚öúÔ∏è{new_balance}‚öúÔ∏è')


@bot.message_handler(func=lambda message: message.text == '–î–µ–º–æ –ë–∞–∫–∞—Ä–∞üé≤')
def handle_demo_baccarat(message):
    rules_text = "–î–µ–º–æ –ë–∞–∫–∞—Ä–∞ - —ç—Ç–æ –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É –±–µ–∑ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥.üé≤\n\n" \
                 "–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!üçÄ"

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    item1 = types.KeyboardButton("–ù–∞—á–∞—Ç—å –î–µ–º–æ –ò–≥—Ä—É")
    item2 = types.KeyboardButton("–ù–∞–∑–∞–¥‚Ü©Ô∏è")
    markup.row(item1, item2)

    bot.send_message(chat_id=message.chat.id, text=rules_text, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –î–µ–º–æ –ò–≥—Ä—É')
def handle_start_demo_baccarat_game(message):
    markup = generate_demo_baccarat_color_markup()
    bot.send_message(message.chat.id, "üé≤–í—ã–±–µ—Ä–µ—Ç–µ —Ü–≤–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—åüé≤", reply_markup=markup)

def generate_demo_baccarat_color_markup():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    colors = ['üü¶ demo', 'üü• demo', '‚¨úÔ∏è demo']
    markup.add(*[types.KeyboardButton(color) for color in colors])
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥‚Ü©Ô∏è'))
    return markup





@bot.message_handler(func=lambda message: message.text in ['üü¶ demo', 'üü• demo', '‚¨úÔ∏è demo'])
def handle_demo_baccarat_color_choice(message):
    color_choice = message.text
    user_id = message.chat.id

    if color_choice == 'üü¶ demo' or color_choice == 'üü• demo':
        win_chance = 50  # –®–∞–Ω—Å –ø–æ–±–µ–¥—ã –¥–ª—è —Å–∏–Ω–µ–≥–æ –∏ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ–≤ 35%
    elif color_choice == '‚¨úÔ∏è demo':
        win_chance = 7  # –®–∞–Ω—Å –ø–æ–±–µ–¥—ã –¥–ª—è —Å–µ—Ä–æ–≥–æ —Ü–≤–µ—Ç–∞ 3%
        payout_multiplier = 10
    else:
        win_chance = 0

    if random.randint(1, 100) <= win_chance:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∏–≥—Ä–∞–ª
        if color_choice == '‚¨úÔ∏è demo':
            bot.send_message(user_id, f"üíé–ü–æ–±–µ–¥–∞üíé \n–í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª –±—ã: x{payout_multiplier} –æ—Ç —Å—Ç–∞–≤–∫–∏")
        else:
            bot.send_message(user_id, "üíé–ü–æ–±–µ–¥–∞üíé \n–í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª –±—ã: x2 –æ—Ç —Å—Ç–∞–≤–∫–∏")

    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∏–≥—Ä–∞–ª
        bot.send_message(user_id, "üõë–ü—Ä–æ–∏–≥—Ä—ã—àüõë")

    # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ




def generate_baccarat_color_markup():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    blue_button = types.KeyboardButton("üü¶")
    red_button = types.KeyboardButton("üü•")
    gray_button = types.KeyboardButton("‚¨úÔ∏è")
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥‚Ü©Ô∏è")

    markup.add(blue_button, red_button, gray_button)
    markup.add(back_button)

    return markup

def generate_demo_slots_markup():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button1 = types.KeyboardButton('üìçSpin')
    button2 = types.KeyboardButton('–ù–∞–∑–∞–¥‚Ü©Ô∏è')
    markup.add(button1, button2)
    return markup


def generate_back_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton('–ù–∞–∑–∞–¥‚Ü©Ô∏è')
    markup.add(button)
    return markup

def generate_play_mode_markup():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button1 = types.KeyboardButton('‚öúÔ∏è–ò–≥—Ä–∞—Ç—å –ù–∞ —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å‚öúÔ∏è')
    button2 = types.KeyboardButton('ü™ô–ò–≥—Ä–∞—Ç—å —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Å—á–µ—Ç–æ–ºü™ô')
    button3 = types.KeyboardButton('–ù–∞–∑–∞–¥‚Ü©Ô∏è')
    markup.add(button1, button2, button3)

    return markup

def generate_demo_game_markup():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button1 = types.KeyboardButton('–î–µ–º–æ –ë–∞–∫–∞—Ä–∞üé≤')
    button2 = types.KeyboardButton('–î–µ–º–æ –°–ª–æ—Ç—ãüé∞')
    button3 = types.KeyboardButton('–ù–∞–∑–∞–¥‚Ü©Ô∏è')
    markup.add(button1, button2, button3)

    return markup

def generate_slot_markup():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button1 = types.KeyboardButton('Spinüìç')
    button2 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É‚öôÔ∏è')
    button3 = types.KeyboardButton('–ù–∞–∑–∞–¥‚Ü©Ô∏è')
    markup.add(button1, button2, button3)
    return markup



def generate_game_markup():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button1 = types.KeyboardButton('–ë–∞–∫–∞—Ä–∞üé≤')
    button2 = types.KeyboardButton('–°–ª–æ—Ç—ãüé∞')
    button3 = types.KeyboardButton('–ù–∞–∑–∞–¥‚Ü©Ô∏è')
    markup.add(button1, button2, button3)
    return markup
#------------------------------------------------------------------------------------------------------------------------------------------------------------------#
#–í—ã–≤–æ–¥ –±–∞–±–æ–∫



@bot.message_handler(func=lambda message: message.text == '–£–∑–Ω–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ë–∞–ª–∞–Ω—Å‚öúÔ∏è')
def know_balance(message):
    user_id = message.chat.id
    real_balance = get_real_balance(user_id)
    bot.send_message(chat_id=message.chat.id, text=f"–í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ‚öúÔ∏è{real_balance}‚öúÔ∏è")


#------------------------------------------------------------------------------------------------------------------------------------------------------------------#


def generate_markup():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button1 = types.KeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Åüì≤')
    button2 = types.KeyboardButton('–ù–∞—á–∞—Ç—å –ò–≥—Ä–∞—Ç—åüé∞')
    button3 = types.KeyboardButton('–í—ã–≤–æ–¥ –°—Ä–µ–¥—Å—Ç–≤üí∏')
    button4 = types.KeyboardButton('–£–∑–Ω–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ë–∞–ª–∞–Ω—Å‚öúÔ∏è')
    markup.add(button1, button2, button3,button4)
    return markup



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()

